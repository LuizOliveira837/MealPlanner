# ü•ó MealPlanner API

API RESTful desenvolvida em **.NET 8 + SQL Server**, com arquitetura baseada em **DDD (Domain-Driven Design)**, para gerenciamento de **planos alimentares por paciente**. Criada como parte de um desafio t√©cnico, com foco em organiza√ß√£o, escalabilidade e boas pr√°ticas.

---

## ‚öôÔ∏è Tecnologias e Ferramentas

- ASP.NET Core 8 (Web API)
- C# 12
- Entity Framework Core 8
- SQL Server (via LocalDB ou Docker)
- AutoMapper
- FluentValidation
- Docker / docker-compose (extra)
- Arquitetura baseada em DDD

---

## üß± Arquitetura

O projeto est√° organizado seguindo os princ√≠pios do **Domain-Driven Design (DDD)**:

/src
/backend
/MealPlanner.API ‚Üí Controllers e endpoints
/MealPlanner.Application ‚Üí Casos de uso, interfaces de servi√ßos
/MealPlanner.Domain ‚Üí Entidades e l√≥gica de dom√≠nio
/MealPlanner.Persistence ‚Üí Reposit√≥rios e DbContext
/shared
/MealPlanner.Communication ‚Üí DTOs e contratos de comunica√ß√£o
/MealPlanner.Exception ‚Üí Exceptions personalizadas
/tests ‚Üí (planejado para testes unit√°rios)


---

## üì¶ Funcionalidades

### ‚úÖ Implementadas

- CRUD de:
  - Pacientes
  - Alimentos
  - Planos alimentares
- Associa√ß√£o de alimentos a planos com por√ß√µes (em gramas)
- C√°lculo de calorias por alimento e total por plano
- Visualiza√ß√£o de plano alimentar do paciente no dia (`GET /patients/{id}/mealplans/today`)
- Soft delete de pacientes
- Pagina√ß√£o e filtros simples
- Valida√ß√µes com FluentValidation
- Mapeamento de entidades com AutoMapper
- Tratamento de erros com `ProblemDetails`

---

## ‚ùå Funcionalidades pendentes

- ‚ùó **Testes unit√°rios** (n√£o foram implementados a tempo)
- ‚ùó **Autentica√ß√£o JWT com roles (`NUTRITIONIST`, `ADMIN`)** ‚Äî estava prevista, mas n√£o conclu√≠da

---

## üöÄ Como executar

### Pr√©-requisitos

- .NET 8 SDK
- SQL Server ou Docker
- Visual Studio / VS Code

### Passos para rodar

```bash
# Clone o projeto

# V√° para a pasta da API
cd MealPlanner/src/backend/MealPlanner.API

# Execute as migrations
dotnet ef database update --project ../MealPlanner.Persistence --startup-project .

# Rode a aplica√ß√£o
dotnet run

 Melhorias futuras
 Implementar autentica√ß√£o JWT e controle por perfil (nutricionista/admin)

 Criar testes unit√°rios com xUnit (‚â•70% de cobertura)

 Cadastro de nutricionistas e v√≠nculo com pacientes

 Suporte a refei√ß√µes por per√≠odo (caf√©, almo√ßo, janta)

 Dashboard de calorias por semana/m√™s

 Hist√≥rico de planos alimentares

 Deploy automatizado com GitHub Actions

 Documenta√ß√£o OpenAPI com exemplos completos
